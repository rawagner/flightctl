// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

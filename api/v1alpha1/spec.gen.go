// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
